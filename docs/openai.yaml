openapi: 3.0.3
info:
  title: Filmorate API
  description: REST API для социальной сети по оценке фильмов
  version: 1.0.0
  contact:
    name: Filmorate Team
    email: support@filmorate.ru

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /users:
    get:
      summary: Получить всех пользователей
      description: Возвращает список всех зарегистрированных пользователей
      operationId: getAllUsers
      tags:
        - Users
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Создать нового пользователя
      description: Создает нового пользователя в системе
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Обновить пользователя
      description: Обновляет информацию о существующем пользователе
      operationId: updateUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: Пользователь успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      summary: Получить пользователя по ID
      description: Возвращает информацию о пользователе по его идентификатору
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Удалить пользователя
      description: Удаляет пользователя из системы по его идентификатору
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Пользователь успешно удален
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/friends/{friendId}:
    put:
      summary: Добавить друга
      description: Добавляет пользователя в друзья другому пользователю
      operationId: addFriend
      tags:
        - Friends
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Друг успешно добавлен
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Удалить друга
      description: Удаляет пользователя из друзей
      operationId: removeFriend
      tags:
        - Friends
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: friendId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Друг успешно удален
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/friends:
    get:
      summary: Получить список друзей
      description: Возвращает список всех друзей пользователя
      operationId: getFriends
      tags:
        - Friends
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/friends/common/{otherId}:
    get:
      summary: Получить общих друзей
      description: Возвращает список общих друзей двух пользователей
      operationId: getCommonFriends
      tags:
        - Friends
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: otherId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /films:
    get:
      summary: Получить все фильмы
      description: Возвращает список всех фильмов в системе
      operationId: getAllFilms
      tags:
        - Films
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Добавить новый фильм
      description: Создает новый фильм в системе
      operationId: addFilm
      tags:
        - Films
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
      responses:
        '200':
          description: Фильм успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Обновить фильм
      description: Обновляет информацию о существующем фильме
      operationId: updateFilm
      tags:
        - Films
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
      responses:
        '200':
          description: Фильм успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /films/{id}:
    get:
      summary: Получить фильм по ID
      description: Возвращает информацию о фильме по его идентификатору
      operationId: getFilmById
      tags:
        - Films
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /films/{id}/like/{userId}:
    put:
      summary: Добавить лайк фильму
      description: Пользователь ставит лайк фильму
      operationId: addLike
      tags:
        - Likes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Лайк успешно добавлен
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /films/{filmId}/like/{userId}:
    delete:
      summary: Удалить лайк
      description: Пользователь удаляет свой лайк у фильма
      operationId: deleteLike
      tags:
        - Likes
      parameters:
        - name: filmId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Лайк успешно удален
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /films/popular:
    get:
      summary: Получить популярные фильмы
      description: Возвращает список самых популярных фильмов по количеству лайков
      operationId: getTopFilms
      tags:
        - Films
      parameters:
        - name: count
          in: query
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 10
          description: Количество возвращаемых фильмов (по умолчанию 10)
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /mpa:
    get:
      summary: Получить все рейтинги MPA
      description: Возвращает список всех доступных рейтингов MPA
      operationId: getAllMpaRatings
      tags:
        - MPA
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mpa'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /mpa/{id}:
    get:
      summary: Получить рейтинг MPA по ID
      description: Возвращает информацию о рейтинге MPA по его идентификатору
      operationId: getMpaById
      tags:
        - MPA
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mpa'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /genres:
    get:
      summary: Получить все жанры
      description: Возвращает список всех доступных жанров фильмов
      operationId: getAllGenres
      tags:
        - Genres
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /genres/{id}:
    get:
      summary: Получить жанр по ID
      description: Возвращает информацию о жанре по его идентификатору
      operationId: getGenreById
      tags:
        - Genres
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    UserDto:
      type: object
      required:
        - email
        - login
        - birthday
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор пользователя
          example: 1
        email:
          type: string
          format: email
          description: Электронная почта пользователя
          example: "user@example.com"
        login:
          type: string
          description: Логин пользователя (не может содержать пробелы)
          minLength: 1
          example: "user_login"
        name:
          type: string
          description: Имя пользователя (если не указано, используется логин)
          example: "Иван Иванов"
        birthday:
          type: string
          format: date
          description: Дата рождения пользователя
          example: "1990-01-01"

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          example: "user@example.com"
        login:
          type: string
          example: "user_login"
        name:
          type: string
          example: "Иван Иванов"
        birthday:
          type: string
          format: date
          example: "1990-01-01"
        friends:
          type: array
          items:
            type: integer
            format: int64
          description: Список ID друзей пользователя
          example: [2, 3, 4]

    Film:
      type: object
      required:
        - name
        - description
        - releaseDate
        - duration
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          description: Название фильма
          example: "Терминатор"
        description:
          type: string
          description: Описание фильма
          example: "Фантастический боевик о киборге-убийце"
        releaseDate:
          type: string
          format: date
          description: Дата выхода фильма
          example: "1984-10-26"
        duration:
          type: integer
          format: int32
          description: Продолжительность фильма в минутах
          example: 107
        mpa:
          $ref: '#/components/schemas/Mpa'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        likes:
          type: array
          items:
            type: integer
            format: int64
          description: Список ID пользователей, поставивших лайк
          example: [1, 2, 3]

    Mpa:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          description: Название рейтинга
          example: "G"
        description:
          type: string
          description: Описание рейтинга
          example: "Нет возрастных ограничений"

    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          description: Название жанра
          example: "Комедия"

  responses:
    ValidationError:
      description: Ошибка валидации данных
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Логин не может содержать пробелы"

    NotFoundError:
      description: Запрашиваемый ресурс не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Пользователь с id 999 не найден"

    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Произошла внутренняя ошибка сервера"

tags:
  - name: Users
    description: Операции с пользователями
  - name: Friends
    description: Операции с друзьями пользователей
  - name: Films
    description: Операции с фильмами
  - name: Likes
    description: Операции с лайками фильмов
  - name: MPA
    description: Операции с рейтингами MPA
  - name: Genres
    description: Операции с жанрами фильмов